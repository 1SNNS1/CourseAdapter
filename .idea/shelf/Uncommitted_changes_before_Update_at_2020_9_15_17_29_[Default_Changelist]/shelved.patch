Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># 本项目试图降低接入门槛\r\n\r\n## 愉快食用需要\r\n\r\n1. IntelliJ IDEA\r\n\r\n2. 简单 Java 基础，Kotlin 入门：字符串处理、类的继承、方法重写\r\n\r\n3. Jsoup 入门\r\n\r\n## 食用方法\r\n\r\n1. fork 本项目，git clone 到本地，用 IDEA 导入。\r\n\r\n1. 继承抽象类 `Parser`，重写它的 `generateCourseList` 方法。\r\n\r\n2. `Common` 中抽取了一些可能通用的解析函数，当然你也可以补充。\r\n\r\n3. 重写好函数后，新建一个测试的kt文件，如示例中的 `ZhengFangTest.kt`，你运行一下就懂了。\r\n\r\n4. commit 进行 [Pull Request](http://www.ruanyifeng.com/blog/2017/07/pull_request.html)\r\n\r\n## 注意\r\n\r\n1. 建议从项目外引用 html 文件，提交时一定不要上传 html 文件，涉及隐私问题。\r\n\r\n2. 其实继承该抽象类，数据来源不一定是 html，可以是 Excel、Json 等等（发挥下想象力）。\r\n\r\n## Todo\r\n\r\n1. 增加模拟登录导入的模板\r\nWarning:Kotlin: Classpath entry points to a non-existent location: C:\\Users\\Rocinante\\Downloads\\kotlin-csv-jvm-0.7.3.jar
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.md	(revision 92ad55d4ff41a9ad823d8e6ca4b0d57ab5d09a1c)
+++ README.md	(date 1600161957216)
@@ -26,7 +26,3 @@
 
 2. 其实继承该抽象类，数据来源不一定是 html，可以是 Excel、Json 等等（发挥下想象力）。
 
-## Todo
-
-1. 增加模拟登录导入的模板
-Warning:Kotlin: Classpath entry points to a non-existent location: C:\Users\Rocinante\Downloads\kotlin-csv-jvm-0.7.3.jar
\ No newline at end of file
Index: src/main/java/parser/AHNUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\n\r\nclass AHNUParser(source: String) : Parser(source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val kbtable = doc.select(\"table[id=kcb]\").first()\r\n        val kcb = kbtable.getElementsByTag(\"tbody\").first()\r\n        for (tr in kcb.getElementsByTag(\"tr\")) {\r\n            if (tr.className() == \"thtd\") continue\r\n\r\n            val td = tr.getElementsByTag(\"td\")\r\n            for (st in td) {\r\n                if (st.childNodeSize() <= 1) continue\r\n                //println(st)\r\n                var courseName: String = \"\";\r\n                var day = 0;\r\n                var room = \"\";\r\n                var teacher = \"\";\r\n                var startNode = 0;\r\n                var endNode = 0;\r\n                var endWeek = 0;\r\n                var startWeek = 0;\r\n                val classInfo = st.html().split(\"<br>\")\r\n                var cnt = 1\r\n                var t = 0\r\n                classInfo.forEach {\r\n                    val info = Jsoup.parse(it).text().trim().split(' ')\r\n                    if (cnt == 1) courseName = info.toString()\r\n                    else if (cnt == 3) teacher = info.toString()\r\n                    else if (cnt == 4) room = info.toString()\r\n                    else if (cnt == 2) {\r\n                        Common.chineseWeekList.forEachIndexed { index, s ->\r\n                            if (index != 0)\r\n                                if (info.toString().contains(s)) {\r\n                                    day = index\r\n                                    return@forEachIndexed\r\n                                }\r\n                        }\r\n                        t = when {\r\n                            info.toString().contains('单') -> 1\r\n                            info.toString().contains('双') -> 2\r\n                            else -> 0\r\n                        }\r\n                        val matchWeek = Common.weekPattern.find(info.toString())\r\n                        if (matchWeek != null) {\r\n                            val res = matchWeek.value\r\n                            startWeek = res.substringBefore('-').substringAfter('第').toInt()\r\n                            endWeek = res.substringAfter('-').substringBefore('周').toInt()\r\n                        }\r\n                        val p = info.toString().substringAfter('第').substringBefore('节');\r\n                        val startTime = p.substringBefore(',')\r\n                        val endTime = p.substringAfterLast(',')\r\n                        startNode = startTime.toInt()\r\n                        endNode = endTime.toInt()\r\n                    }\r\n                    else if (cnt == 5 && classInfo.size >= 8) {\r\n                        courseList.add(\r\n                            Course(\r\n                                name = courseName.removeSurrounding(\"[\", \"]\"),\r\n                                day = day,\r\n                                room = room.removeSurrounding(\"[\", \"]\"),\r\n                                teacher = teacher.removeSurrounding(\"[\", \"]\"),\r\n                                startNode = startNode,\r\n                                endNode = endNode,\r\n                                startWeek = startWeek,\r\n                                endWeek = endWeek,\r\n                                type = t\r\n                            )\r\n                        )\r\n                    } else if (cnt == 6) courseName = info.toString()\r\n                    else if (cnt == 7) {\r\n                        Common.chineseWeekList.forEachIndexed { index, s ->\r\n                            if (index != 0)\r\n                                if (info.toString().contains(s)) {\r\n                                    day = index\r\n                                    return@forEachIndexed\r\n                                }\r\n                        }\r\n                        t = when {\r\n                            info.toString().contains('单') -> 1\r\n                            info.toString().contains('双') -> 2\r\n                            else -> 0\r\n                        }\r\n                        val matchWeek = Common.weekPattern.find(info.toString())\r\n                        if (matchWeek != null) {\r\n                            val res = matchWeek.value\r\n                            startWeek = res.substringBefore('-').substringAfter('第').toInt()\r\n                            endWeek = res.substringAfter('-').substringBefore('周').toInt()\r\n                        }\r\n                        val p = info.toString().substringAfter('第').substringBefore('节');\r\n                        startNode = p[0].toInt() - 48\r\n                        endNode = p[p.lastIndex].toInt() - 48\r\n                    } else if (cnt == 8) teacher = info.toString()\r\n                    else if (cnt == 9) room = info.toString()\r\n                    cnt += 1\r\n                }\r\n                courseList.add(\r\n                    Course(\r\n                        name = courseName.removeSurrounding(\"[\", \"]\"),\r\n                        day = day,\r\n                        room = room.removeSurrounding(\"[\", \"]\"),\r\n                        teacher = teacher.removeSurrounding(\"[\", \"]\"),\r\n                        startNode = startNode,\r\n                        endNode = endNode,\r\n                        startWeek = startWeek,\r\n                        endWeek = endWeek,\r\n                        type = t\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/parser/AHNUParser.kt	(revision 92ad55d4ff41a9ad823d8e6ca4b0d57ab5d09a1c)
+++ src/main/java/parser/AHNUParser.kt	(date 1600052224353)
@@ -16,7 +16,6 @@
             val td = tr.getElementsByTag("td")
             for (st in td) {
                 if (st.childNodeSize() <= 1) continue
-                //println(st)
                 var courseName: String = "";
                 var day = 0;
                 var room = "";
